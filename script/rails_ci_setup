#!/usr/bin/env bash

#  Rails CI - rails_ci_setup - http://github.com/thewoolleyman/railsci
#  Script to automatically configure an EC2 EBS boot AMI which will run the standard Ruby on Rails Continuous Integration build.
#  Intended to be automatically downloaded and called as a custom setup script from AMIBUILDER - http://github.com/thewoolleyman/amibuilder
#  Copyright (c) 2010 Chad Woolley - The MIT License

set -o noclobber
set -e
set -o pipefail
# set -o nounset # can't set this or it fails when loading default ubuntu .bashrc
trap 'echo RAILSCI - rails_ci_setup: error on line $LINENO' ERR

config() {
  # Configuration options
  RAILSCI_RVM_RUBIES=${RAILSCI_RVM_RUBIES:-'1.8.7-p174 1.9.2-head'}
  RAILSCI_RVM_DEFAULT_RUBY=${RAILSCI_RVM_DEFAULT_RUBY:-'1.8.7-p174'}
  RAILSCI_CHEF_SOLO_CONFIG_URL=${RAILSCI_CHEF_SOLO_CONFIG_URL:-'http://github.com/thewoolleyman/railsci/raw/master/chef/solo.rb'}
  RAILSCI_CHEF_SOLO_JSON_URL=${RAILSCI_CHEF_SOLO_JSON_URL:-'http://github.com/thewoolleyman/railsci/raw/master/chef/node.json'}
  RAILSCI_CHEF_REPO_URL=${RAILSCI_CHEF_REPO_URL:-'http://github.com/thewoolleyman/railsci_chef_repo/tarball/master'}

  # Debugging Options
  RAILSCI_NO_INSTALL_PACKAGES=${RAILSCI_NO_INSTALL_PACKAGES:-false}
  RAILSCI_NO_SETUP_RVM=${RAILSCI_NO_SETUP_RVM:-false}
  RAILSCI_NO_INSTALL_CHEF=${RAILSCI_NO_INSTALL_CHEF:-false}
  RAILSCI_NO_RUN_CHEF=${RAILSCI_NO_RUN_CHEF:-false}
}

install_packages() {
  echo "RAILSCI: Installing packages..."
  echo "RAILSCI: Updating Aptitude..."
  sudo apt-get update
  echo "RAILSCI: Installing packages to build Ruby..."
  sudo apt-get install -y build-essential zlib1g zlib1g-dev libssl-dev openssl libreadline5-dev openssh-server openssh-client ssh wget git-core
  echo "RAILSCI: Installing additional packages required for local install on a new machine..."
  sudo apt-get install -y curl
  echo "RAILSCI: Installing packages used/recommended by RVM..."
  sudo apt-get install -y bison libxml2-dev git-core subversion
  echo "RAILSCI: Finished installing packages..."
}

install_rvm() {
  echo "RAILSCI: Installing RVM..."
  curl -O http://rvm.beginrescueend.com/releases/rvm-install-latest
  chmod a+x rvm-install-latest
  ./rvm-install-latest
  echo "RAILSCI: Finished installing RVM..."
}

enable_rvm() {
  echo "RAILSCI: Enabling RVM in init file $init_file"
  rvm_init="if [[ -s $HOME/.rvm/scripts/rvm ]] ; then source $HOME/.rvm/scripts/rvm ; fi"
  if rvm_line=$(grep '.rvm' $init_file); test -z "$rvm_line"; then
    echo $rvm_init >> $init_file
  fi
  # mount proc to avoid error message from sed: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=559539
  # sudo mount -t proc none /proc/  # comment for now, fails if proc already mounted
  sed -i'.bak' -e 's/^.*&& return.*$//' $init_file
  source $init_file
  echo "RAILSCI: Finished enabling RVM in init file $init_file"
}

install_rvm_rubies() {
  for rvm_ruby in $RAILSCI_RVM_RUBIES
  do
    echo "RAILSCI: Installing RVM ruby: $rvm_ruby"
    rvm install $rvm_ruby
    echo "RAILSCI: Finished nstalling RVM ruby: $rvm_ruby"
  done
}

set_rvm_default_ruby() {
  echo "RAILSCI: Setting RVM default ruby: $RAILSCI_RVM_DEFAULT_RUBY"
  set +e
  rvm --default use $RAILSCI_RVM_DEFAULT_RUBY
  echo "RC=$?"
  set -e
  echo "RAILSCI: Finished setting RVM default ruby: $RAILSCI_RVM_DEFAULT_RUBY"
}

setup_rvm() {
  echo "RAILSCI: Setting up RVM..."
  install_rvm
  for init_file in ~/.bashrc ~/.bash_profile
  do
    if [[ -e $init_file ]]; then
      set +e  # turn off return code checking for now, failing with output 'tput: unknown terminal "unknown"'
      enable_rvm
      set -e
    fi
  done
  install_rvm_rubies
  set_rvm_default_ruby
  echo "RAILSCI: Finished setting up RVM..."
}

install_chef() {
  echo "RAILSCI: Installing Chef..."
  gem install chef
  echo "RAILSCI: Finished installing Chef..."
}

run_chef() {
  echo "RAILSCI: Running Chef Solo..."
  chef_file_cache_path='/tmp/chef_solo' # must match value in solo.rb
  wget -O ~/solo.rb $RAILSCI_CHEF_SOLO_CONFIG_URL
  wget -O ~/node.json $RAILSCI_CHEF_SOLO_JSON_URL
  rm -rf $chef_file_cache_path
  mkdir -p $chef_file_cache_path

  opscode_cookbooks_url='http://github.com/opscode/cookbooks/tarball/master'
  mkdir -p "$chef_file_cache_path/opscode_cookbooks"
  wget -O - $opscode_cookbooks_url | tar -zxv -C "$chef_file_cache_path/opscode_cookbooks" --strip-components 1
  
  mkdir -p "$chef_file_cache_path/railsci_chef_repo"
  wget -O - $RAILSCI_CHEF_REPO_URL | tar -zxv -C "$chef_file_cache_path/railsci_chef_repo" --strip-components 1

  echo "RAILSCI: Executing chef-solo command: 'rvmsudo chef-solo -c ~/solo.rb -j ~/node.json'"
  rvmsudo chef-solo -c ~/solo.rb -j ~/node.json
  echo "RAILSCI: Finished running Chef Solo..."
}

setup_all() {
  echo "RAILSCI: Setting up Rails CI..."
  if [[ ! $RAILSCI_NO_INSTALL_PACKAGES = true ]] ; then
    install_packages
  fi
  if [[ ! $RAILSCI_NO_SETUP_RVM = true ]] ; then
    setup_rvm
  fi
  if [[ ! $RAILSCI_NO_INSTALL_CHEF = true ]] ; then
    install_chef
  fi
  if [[ ! $RAILSCI_NO_RUN_CHEF = true ]] ; then
    run_chef
  fi
}

config
setup_all
